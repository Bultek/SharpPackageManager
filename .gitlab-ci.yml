# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/dotNET.gitlab-ci.yml

# The following script will work for any project that can be built from command line by msbuild
# It uses powershell shell executor, so you need to add the following line to your config.toml file
# (located in gitlab-runner.exe directory):
# shell = 'powershell'
#
# The script is composed of 3 stages: build, test and deploy.
#
# The build stage restores NuGet packages and uses msbuild to build the exe and msi
# One major issue you'll find is that you can't build msi projects from command line
# if you use vdproj.  There are workarounds building msi via devenv, but they rarely work
# The best solution is migrating your vdproj projects to WiX, as it can be build directly
# by msbuild.
#
# The test stage runs nunit from command line against Test project inside your solution
# It also saves the resulting TestResult.xml file
#
# The deploy stage copies the exe and msi from build stage to a network drive
# You need to have the network drive mapped as Local System user for gitlab-runner service to see it
# The best way to persist the mapping is via a scheduled task
# running the following batch command: net use P: \\x.x.x.x\Projects /u:your_user your_pass /persistent:yes

# place project specific paths in variables to make the rest of the script more generic
.shared_windows_runners:
  tags:
    - shared-windows
    - windows
    - windows-1809
default:
  image: cookiesan/visualstudio-dotnet48
variables:
  EXE_RELEASE_FOLDER: 'src\SharpPackageManager\bin\Release'
  NUGET_PATH: 'C:\NuGet\nuget.exe'
  MSBUILD_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\msbuild.exe'
  NUNIT_PATH: 'C:\Program Files (x86)\NUnit.org\nunit-console\nunit3-console.exe'
  

stages:
  - restore
  - build
restore_job:
  stage: build
  only:
    - tags  # the build process will only be started by git tag commits
    - pushes
    - merges
  script:
    - 'powershell Invoke-WebRequest -Uri "https://download.visualstudio.microsoft.com/download/pr/c308d1c8-6b87-4859-9de6-c09a446c10ea/40f74ffb9fdcdfe922f51901a9aebdfdc9bda1afb3bf780f04216a40690fc3f8/vs_Community.exe" -OutFile "C:\VS.exe"'
    - 'powershell start "C:\VS.exe" update -q --downloadThenInstall'
    - 'powershell Invoke-WebRequest -Uri "https://download.visualstudio.microsoft.com/download/pr/1eb43f77-61af-40b0-8a5a-6165724dca60/f12aac6d4a907b4d54f5d41317aae0f7/dotnet-sdk-6.0.201-win-x64.exe" -OutFile "C:\DOTNET.exe"'
    - 'powershell start "C:\DOTNET.exe" /install /quiet /norestart'
    - 'powershell $MSBUILD_PATH'
  artifacts:
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - '$env:EXE_RELEASE_FOLDER\'  # saving exe to copy to deploy folder
